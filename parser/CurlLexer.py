# Generated from Curl.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,139,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,11,
        1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,4,15,81,8,15,11,15,12,15,
        82,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
        16,1,16,1,16,3,16,113,8,16,1,17,1,17,1,17,4,17,118,8,17,11,17,12,
        17,119,1,18,1,18,3,18,124,8,18,1,18,1,18,5,18,128,8,18,10,18,12,
        18,131,9,18,1,19,4,19,134,8,19,11,19,12,19,135,1,19,1,19,0,0,20,
        1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
        27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,5,1,0,48,57,3,0,48,
        57,65,70,97,102,4,0,48,57,65,90,97,122,126,126,5,0,43,43,45,46,48,
        57,65,90,97,122,3,0,9,10,13,13,32,32,149,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,46,1,0,0,0,5,
        49,1,0,0,0,7,52,1,0,0,0,9,54,1,0,0,0,11,56,1,0,0,0,13,60,1,0,0,0,
        15,62,1,0,0,0,17,64,1,0,0,0,19,66,1,0,0,0,21,69,1,0,0,0,23,71,1,
        0,0,0,25,73,1,0,0,0,27,75,1,0,0,0,29,77,1,0,0,0,31,80,1,0,0,0,33,
        112,1,0,0,0,35,117,1,0,0,0,37,123,1,0,0,0,39,133,1,0,0,0,41,42,5,
        99,0,0,42,43,5,117,0,0,43,44,5,114,0,0,44,45,5,108,0,0,45,2,1,0,
        0,0,46,47,5,45,0,0,47,48,5,88,0,0,48,4,1,0,0,0,49,50,5,45,0,0,50,
        51,5,72,0,0,51,6,1,0,0,0,52,53,5,34,0,0,53,8,1,0,0,0,54,55,5,58,
        0,0,55,10,1,0,0,0,56,57,5,58,0,0,57,58,5,47,0,0,58,59,5,47,0,0,59,
        12,1,0,0,0,60,61,5,47,0,0,61,14,1,0,0,0,62,63,5,91,0,0,63,16,1,0,
        0,0,64,65,5,93,0,0,65,18,1,0,0,0,66,67,5,58,0,0,67,68,5,58,0,0,68,
        20,1,0,0,0,69,70,5,64,0,0,70,22,1,0,0,0,71,72,5,35,0,0,72,24,1,0,
        0,0,73,74,5,63,0,0,74,26,1,0,0,0,75,76,5,38,0,0,76,28,1,0,0,0,77,
        78,5,61,0,0,78,30,1,0,0,0,79,81,7,0,0,0,80,79,1,0,0,0,81,82,1,0,
        0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,32,1,0,0,0,84,85,5,71,0,0,85,
        86,5,69,0,0,86,113,5,84,0,0,87,88,5,80,0,0,88,89,5,85,0,0,89,113,
        5,84,0,0,90,91,5,80,0,0,91,92,5,79,0,0,92,93,5,83,0,0,93,113,5,84,
        0,0,94,95,5,80,0,0,95,96,5,65,0,0,96,97,5,84,0,0,97,98,5,67,0,0,
        98,113,5,72,0,0,99,100,5,68,0,0,100,101,5,69,0,0,101,102,5,76,0,
        0,102,103,5,69,0,0,103,104,5,84,0,0,104,113,5,69,0,0,105,106,5,79,
        0,0,106,107,5,80,0,0,107,108,5,84,0,0,108,109,5,73,0,0,109,110,5,
        79,0,0,110,111,5,78,0,0,111,113,5,83,0,0,112,84,1,0,0,0,112,87,1,
        0,0,0,112,90,1,0,0,0,112,94,1,0,0,0,112,99,1,0,0,0,112,105,1,0,0,
        0,113,34,1,0,0,0,114,115,5,37,0,0,115,116,7,1,0,0,116,118,7,1,0,
        0,117,114,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,
        0,120,36,1,0,0,0,121,124,7,2,0,0,122,124,3,35,17,0,123,121,1,0,0,
        0,123,122,1,0,0,0,124,129,1,0,0,0,125,128,7,3,0,0,126,128,3,35,17,
        0,127,125,1,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,
        0,129,130,1,0,0,0,130,38,1,0,0,0,131,129,1,0,0,0,132,134,7,4,0,0,
        133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,
        136,137,1,0,0,0,137,138,6,19,0,0,138,40,1,0,0,0,8,0,82,112,119,123,
        127,129,135,1,6,0,0
    ]

class CurlLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    DIGITS = 16
    METHOD = 17
    HEX = 18
    STRING = 19
    WS = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'curl'", "'-X'", "'-H'", "'\"'", "':'", "'://'", "'/'", "'['", 
            "']'", "'::'", "'@'", "'#'", "'?'", "'&'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "DIGITS", "METHOD", "HEX", "STRING", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "DIGITS", "METHOD", "HEX", "STRING", "WS" ]

    grammarFileName = "Curl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


